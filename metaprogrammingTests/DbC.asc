function mergeSort(array, i, j) {
	mid = floor((i + j) / 2);
	
	if (i < j) {		
		mergeSort(array, i, mid);
		mergeSort(array, mid + 1, j);	
		merge(array, i, mid, j);		
	}
	
	return array;
}

function merge(array, l, m, r) {
	n1 = (m - l) + 1;
	n2 = r - m;
	
	L = [];
	R = [];
	
	for (i = 0; i < n1; i++)
		L[i] = array[l + i];
	for (j = 0; j < n2; j++)
		R[j] = array[m + 1 + j];
	
	i = 0;
	j = 0;
	k = l;
	
	while (i < n1 and j < n2) {		
		if (L[i] <= R[j]) {
			array[k] = L[i]; 
            i++; 
		}
		else {        
            array[k] = R[j]; 
            j++; 
        }
        k++; 
	}
	
	while (i < n1) {    
        array[k] = L[i]; 
        i++;
        k++; 
    } 
	
	while (j < n2) {     
        array[k] = R[j]; 
        j++;
        k++; 
    }	
}


function wrapper(preCond, errorPreCond, func, args, postCond, errorPostCond) {
	
	eval("toReturn = << (function (" + #(args) + ") {
		f = ~func;
		preF = ~preCond;
		postF = ~postCond;
		res = nil; 
		if (preF(~args)) {
			res = f(~args);
			if (not postF(res))
				~errorPostCond;
		}
		else {
			~errorPreCond;			
		}
		
		return res;
	})>>;");
	
	return toReturn;    
}

function testerPrecond(array) {
	return (array != nil and objectSize(array) > 0);
}

function testerPostcond(array) {
	for (i = 0; i < objectSize(array) - 1; i++) {
		if (array[i] > array[i + 1])
			return false;
	}
	return true;
}

wrappedMergeSort = !(wrapper(<<testerPrecond>>, <<print("Error: nil or empty array. Exiting...\n"); exit();>>, <<mergeSort>>,
<<array, i , j>>, <<testerPostcond>>, <<print("Error: array is not sorted. Exiting...\n"); exit();>>));

array = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
print("Unsorted array = ", array, "\n");

print("Safe mergeSort to be called:\n");
print("Sorted array =   ", wrappedMergeSort(array, 0, objectSize(array) - 1), "\n");

array = [];
print("mergeSort with error to be called:\n");
print("Sorted array =   ", wrappedMergeSort(array, 0, objectSize(array) - 1), "\n");