function generalLoop(elist1, expr, elist2, f, idList) {	
	
	eval("toReturn = <<;>>; for (" + #(elist1) + "; " + #(expr) + "; " + #(elist2) + ") {
		if (typeOf(idList) != \"undefined\")
			toReturn = << ~toReturn; ~(f(~idList)); >>;
		else
			toReturn = << ~toReturn; f(); >>;
	}");

	return toReturn;
}

cellMultAST = (
	function cellMult (i, j, k) {
		return <<
			c[~i][~j] = c[~i][~j] + (a[~i][~k] * b[~k][~j]);			
		>>;
	}
);

mmThirdLoopAST = (
	function mmThirdLoop (i, j) {
		columns = objectSize(a[0]);
		return generalLoop(<<k = 0>>, <<k < ~columns>>, <<k++>>, cellMultAST, <<~i, ~j, k>>);		 
	}
);

mmSecondLoopAST = (
	function mmSecondLoop (i) {
		columns = objectSize(b[0]); 
		return generalLoop(<<j = 0>>, <<j < ~columns>>, <<j++>>, mmThirdLoopAST, <<~i, j>>);		
	}
);

mmFirstLoopAST = (
	function mmFirstLoop () {
		rows = objectSize(a);
		return generalLoop(<<i = 0>>, <<i < ~rows>>, <<i++>>, mmSecondLoopAST, <<i>>);		
	}
);

function matrixMultiplication(a, b, c) {
	ast = mmFirstLoopAST();
	return ast;
}

x = [[1, 2, 3], [4, 5, 6]];
y = [[7, 8], [9, 10], [11, 12]];
z = [[0, 0], [0, 0]];

a = x;
b = y;
c = z;

matrixMultiplicationVar = matrixMultiplication(a,b,c);
!(matrixMultiplicationVar);
print(x, " X ", y, " =\n", z, "\n\n");

a = [[1, 1, 1], [2, 2, 2]];
b = [[3, 3], [4, 4], [5, 5]];
c = [[0, 0], [0, 0]];

!(matrixMultiplicationVar);
print(a, " X ", b, " =\n", c, "\n\n");

a = [[-5, 2, 0], [7, -3, 4], [-1, 3, 2]];
b = [[8, 1, 3], [2, -5, 4], [6, 7, 5]];
c = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];

matrixMultiplicationVar = matrixMultiplication(a,b,c); //print(#(matrixMultiplicationVar));
!(matrixMultiplicationVar);
print(x, " X ", y, " =\n", c, "\n\n");
