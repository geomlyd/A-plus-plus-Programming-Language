
function TreeHost(){
	h = [];
	function accept(h, node){
		calledFunc = h[node["subtype"]];
		
		calledFunc(h, node);
	}
	function acceptProgram(h, node){
		if(node["child"] != nil)
			h..accept(node);
		h.visitor..visit(node);
	}
	function acceptStmts(h, node){
		for(i = 0; i < node["numchildren"]; i++)
			h..accept(node[i]);
		h.visitor..visitStmts(node);
	}
	function acceptStmt(h, node){
		if(node["child"] != nil)
			h..accept(node["child"]);
		h.visitor..visitStmt(node);
	}
	function acceptExpr(h, node){
		h..accept(node["child"]);
		h.visitor..visitExpr(node);
	}
	function acceptArithExpr(h, node){
		h..accept(node["leftexpr"]);
		h..accept(node["rightexpr"]);
		h.visitor..visitArithExpr(node);
	}
	function acceptRelExpr(h, node){
		h..accept(node["leftexpr"]);
		h..accept(node["rightexpr"]);
		h.visitor..visitRelExpr(node);
	}
	function acceptBoolExpr(h, node){
		h..accept(node["leftexpr"]);
		h..accept(node["rightexpr"]);
		h.visitor..visitBoolExpr(h, node);
	}
	function acceptTerm(h, node){
		h..accept(node["child"]);
		h.visitor..visitTerm(h, node);
	}
	function acceptTermParensExpr(h, node){
		h..accept(node["expr"]);
		h.visitor..visitTermParensExpr(node);
	}
	function acceptTermMinusExpr(h, node){
		h..accept(node["expr"]);
		h.visitor..visitTermMinusExpr(node);
	}
	function acceptTermNotExpr(h, node){
		h..accept(node["expr"]);
		h.visitor..visitTermNotExpr(node);
	}
	function acceptTermPlusPlusLvalue(h, node){
		h..accept(node["lvalue"]);
		h.visitor..visitTermPlusPlusLvalue(node);
	}
	function acceptTermMinusMinusLvalue(h, node){
		h..accept(node["lvalue"]);
		h.visitor..visitTermMinusMinusLvalue(node);
	}
	function acceptTermLvaluePlusPlus(h, node){
		h..accept(node["lvalue"]);
		h.visitor..visitTermLvaluePlusPlus(node);
	}
	function acceptTermLvalueMinusMinus(h, node){
		h..accept(node["lvalue"]);
		h.visitor..visitTermLvalueMinusMinus(node);
	}	
	function acceptAssignExpr(h, node){
		h..accept(node["lvalue"]);
		h..accept(node["expr"]);
		h.visitor..visitAssignExpr(node);
	}
	function acceptPrimary(h, node){
		h..accept(node["child"]);
		h.visitor..visitPrimary(node);
	}	
	function acceptLvalueId(h, node){
		h.visitor..visitLvalueId(node);
	}
	function acceptLvalueGlobalId(h, node){
		h.visitor..visitLvalueGlobalId(node);
	}	
	function acceptLvalueLocalId(h, node){
		h.visitor..visitLvalueLocalId(node);
	}
	function acceptLvalueMember(h, node){
		h..accept(node["member"]);
		h.visitor..visitLvalueMember(node);
	}	
	function acceptMemberId(h, node){
		h..accept(node["caller"]);
		h.visitor..visitMemberId(node);
	}
	function acceptMemberExpr(h, node){
		h..accept(node["caller"]);
		h..accept(node["expr"]);
		h.visitor..visitMemberExpr(node);
	}	
	function acceptMultiCall(h, node){
		h..accept(node["call"]);
		if(node["elist"] != nil)
			accept(node["elist"]);
		h.visitor..visitMultiCall(node);
	}
	function acceptFdefCall(h, node){
		h..accept(node["funcdef"]);
		if(node["elist"] != nil)
			accept(node["elist"]);
		h.visitor..visitFdefCall(node);
	}
	function acceptCall(h, node){
		h..accept(node["lvalue"]);
		h..accept(node["callsuffix"]);
		h.visitor..visitCall(node);
	}
	function acceptNormCallSuffix(h, node){
		h..accept(node["normcall"]);
		h.visitor..visitNormCallSuffix(node);
	}
	function acceptMethodCallSuffix(h, node){
		h..accept(node["methodcall"]);
		h.visitor..visitMethodCallSuffix(node);
	}	
	function acceptNormCall(h, node){
		if(node["elist"] != nil)
			h..accept(node["elist"]);
		h.visitor..visitNormCall(node);
	}
	function acceptMethodCall(h, node){
		if(node["elist"] != nil)
			h..accept(node["elist"]);
		h.visitor..visitMethodCall(node);
	}	
	function acceptElist(h, node){
		if(node["elistnotempty"] != nil)
			h..accept(node["elistnotempty"]);
		h.visitor..visitElist(node);
	}
	function acceptElistNotEmpty(h, node){
		for(i = 0; i < node["numchildren"]; i++)
			h..accept(node[i]);
		h.visitor..visitElistNotEmpty(node);
	}
	function acceptArgument(h, node){
		h..accept(node["expr"]);
		h.visitor..visitArgument(node);
	}	
	function acceptObjectDef(h, node){
		if(node["objectdinner"] != nil)
			h..accept(node["objectdinner"]);
		h.visitor..visitObjectDef(node);
	}
	function acceptObjElistNotEmpty(h, node){
		for(i = 0; i < node["numchildren"]; i++)
			h..accept(node[i]);
		h.visitor..visitObjElistNotEmpty(node);
	}
	function acceptObjectDinnerObjElistNotEmpty(h, node){
		h..accept(node["objelistnotempty"]);
		h.visitor..visitObjectDinnerObjElistnotempty(node);
	}
	function acceptObjectDinnerIndexed(h, node){
		h..accept(node["indexed"]);
		h.visitor..visitObjectDinnerIndexed(node);
	}	
	function acceptIndexed(h, node){
		h..accept(node["commaindexed"]);
	}
	function acceptCommaIndexed(h, node){
		for(i = 0; i < node["numchildren"]; i++)
			h..accept(node[i]);
		h.visitor..visitCommaIndexed(node);
	}	
	function acceptIndexedElem(h, node){
		h..accept(node["object_key"]);
		h..accept(node["object_value"]);
		h.visitor..visitIndexedElem(node);
	}
	function acceptBlock(h, node){
		if(node["stmts"])
			h..accept(node["stmts"]);
		h.visitor..visitBlock(node);
	}	
	function acceptFuncDef(h, node){
		h..accept(node["funcprefix"]);
		if(node["idlist"])
			h..accept(node["idlist"]);
		h..accept(node["block"]);
		h.visitor..visitFuncDef(node);
	}
	function acceptFuncPrefix(h, node){
		if(node["child"])
			h..accept(node["child"]);
		h.visitor..visitFuncPrefix(node);
	}
	function acceptFuncName(h, node){
		if(node["child"])
			h..accept(node["child"]);
		h.visitor..visitFuncName(node);
	}
	function acceptConst(h, node){
		if(node["subtype"] == "const_numconst")
			h.visitor..visitConstNumconst(node);
		else if(node["subtype"] == "const_strconst")
			h.visitor..visitConstStringconst(node);
		else if(node["subtype"] == "const_constnil")
			h.visitor..visitConstnil(node);		
		else if(node["subtype"] == "const_boolconst")
			h.visitor..visitConstBoolconst(node);
	}
	function acceptCommaIdList(h, node){
		for(i = 0; i < node["numchildren"]; i++)
			h..accept(node[i]);
		h.visitor..visitCommaIdList(node);
	}
	function acceptFormal(h, node){
		if(node["expr"])
			accept(node["expr"]);
		h.visitor..visitFormal(node);
	}
	function acceptIfPrefix(h, node){
		h..accept(node["expr"]);
		h.visitor..visitIfPrefix(node);
	}
	function acceptElsePrefix(h, node){
		h.visitor..visitElsePrefix(node);
	}
	function acceptIfStmt(h, node){
		h..accept(node["ifprefix"]);
		h..accept(node["ifstmt_ifstmt"]);
		
		if(node["elseprefix"] != nil){
			h..accept(node["elseprefix"]);
			h..accept(node["ifstmt_elsestmt"]);
			h.visitor..visitIfStmtElseStmt(node);
		}
		else
			h.visitor..visitIfStmt(node);
	}
	function acceptWhileStart(h, node){
		h.visitor..visitWhileStart(node);
	}
	function acceptWhileCond(h, node){
		h..accept(node["expr"]);
		h.visitor..visitWhileCond(node);
	}
	function acceptWhileStmt(h, node){
		h..accept(node["whilestart"]);
		h..accept(node["whilecond"]);
		h..accept(node["stmt"]);
		h.visitor..visitWhileStmt(node);
	}
	function acceptForPrefix(h, node){
		if(node["elist"] != nil)
			h..accept(node["elist"]);
		h..accept(node["expr"]);
		h.visitor..visitForPrefix(node);
	}
	function acceptForStmt(h, node){
		h..accept(node["forprefix"]);
		if(node["elist"] != nil)
			h..accept(node["elist"]);
		h..accept(node["stmt"]);
		h.visitor..visitForStmt(node);
	}
	function acceptReturnStmt(h, node){
		if(node["expr"] != nil){
			h..accept(node["expr"]);
			h.visitor..visitReturnStmtExpr(node);
		}
		else
			h.visitor..visitReturnStmt(node);	
	}
	function acceptBreak(h, node){
		h.visitor..visitBreak(node);
	}
	function acceptContinue(h, node){
		h.visitor..visitContinue(node);
	}
	function acceptQuasiQuotes(h, node){
		h..accept(node["child"]);
		h.visitor..visitQuasiQuotes(node);
	}	
	function acceptQuotedRules(h, node){
		h..accept(node["child"]);
		h.visitor..visitQuotedRules(node);
	}
	function acceptEscapeId(h, node){
		h.visitor..visitEscapeId(node);
	}
	function acceptEscapeExpr(h, node){
		h.visitor..visitEscapeExpr(node);
	}
	function acceptInline(h, node){
		h..accept(node["child"]);
		h.visitor..visitInline(node);
	}	
	function acceptUnparsed(h, node){
		h..accept(node["child"]);
		h.visitor..visitUnparsed(node);
	}
	function acceptCompiledString(h, node){
		h..accept(node["child"]);
		h.visitor..visitCompiledString(node);
	}
	function acceptValueStorage(h, node){
		h.visitor..visitValueStorage(node);
	}	
	function setVisitor(h, v){
		h.visitor = v;
	}

	h.accept = accept;
	
	h.program = acceptProgram;
	h.stmts = acceptStmts;
	h.stmt = acceptStmt;
	  
	h.expr = acceptExpr;
	h.arithexpr = acceptArithExpr;
	h.relexpr = acceptRelExpr;
	h.boolexpr = acceptBoolExpr;
	  
	h.term = acceptTerm;
	h.term_parens_expr = acceptTermParensExpr;
	h.Term_minus_expr = acceptTermMinusExpr;
	h.term_not_expr = acceptTermNotExpr;
	h.term_plus_plus_lvalue = acceptTermPlusPlusLvalue;
	h.term_minus_minus_lvalue = acceptTermMinusMinusLvalue;
	h.term_lvalue_plus_plus = acceptTermLvaluePlusPlus;
	h.term_lvalue_minus_minus = acceptTermLvalueMinusMinus;
	  
	h.assignexpr = acceptAssignExpr;
	h.primary = acceptPrimary;
	h.lvalue_id = acceptLvalueId; 
	h.lvalue_globalid = acceptLvalueGlobalId;
	h.lvalue_localid = acceptLvalueLocalId;
	h.lvalue_member = acceptLvalueMember;
	h.member_id = acceptMemberId;
	h.member_expr = acceptMemberExpr;
	h.multicall = acceptMultiCall;
	h.call = acceptCall;
	h.fdefcall = acceptFdefCall;
	h.normcallsuffix = acceptNormCallSuffix;
	h.methodcallsuffix = acceptMethodCallsuffix;
	h.normcall = acceptNormCall;
	h.methodcall = acceptMethodCall;
	h.elist = acceptElist;
	h.elistnotempty = acceptElistNotEmpty;
	h.argument = acceptArgument;
	h.objelistnotempty = acceptObjElistNotEmpty;
	h.objectdef = acceptObjectDef;
	h.cont_list = acceptObjectDinnerObjElistNotEmpty;
	h.cont_indexed = acceptObjectDinnerIndexed;
	  
	h.indexed = acceptIndexed;
	h.commaindexed = acceptCommaIndexed;
	h.indexedelem = acceptIndexedElem;
	h.block = acceptBlock;
	h.funcdef = acceptFuncDef;
	h.funcprefix = acceptFuncPrefix;
	h.funcname_id = acceptFuncName;
	h.funcname_inline = acceptFuncName;
	h.const = acceptConst;
	h.const_numconst = acceptConst;
	h.const_strconst = acceptConst;
	h.const_nil = acceptConst;
	h.const_boolconst = acceptConst;
	h.id = acceptID;
	h.commaidlist = acceptCommaIdList;
	h.formal = acceptFormal;
	h.ifprefix = acceptIfPrefix;
	h.elseprefix = acceptElsePrefix;   
	h.ifstmt = acceptIfStmt; 
	h.ifstmt_ifstmt = acceptStmt; 
	h.ifstmt_elsestmt = acceptStmt; 
	h.whilestart = acceptWhileStart;
	h.whilecond = acceptWhileCond;
	h.whilestmt = acceptWhileStmt;
	h.forprefix = acceptForPrefix;
	h.forstmt = acceptForStmt;
	h.returnstmt = acceptReturnStmt;
	h["break"] = acceptBreak;
	h["continue"] = acceptContinue;
	  
	h.quasiquotes = acceptQuasiQuotes;
	h.quotedrules = acceptQuotedRules;
	h.escapeid = acceptEscapeId;
	h.escape_expr = acceptEscapeExpr;
	h.inline = acceptInline;
	h.unparsed = acceptUnparsed;
	h.compiledstring = acceptCompiledString;
	  
	h.valuestorage = acceptValueStorage;

	h.setVisitor = setVisitor;
	
	return h;
}

function DeadCodeEliminatorVisitor(){
	v = [];
	
	function removeDeadIfElse (node) {
		expr = node["child"]["ifprefix"]["expr"];
		elseStmt = node["child"]["ifstmt_elsestmt"];
		
		for (j = 0; j < 3; j++) {
			if (expr != nil)
				expr = expr["child"];
		}
					
		if (expr != nil) { 
			val = expr["value"];
			if (val == false or val == 0 or val == nil)				
				node["child"] = elseStmt;
			else if (val == true or val != 0)
				node["child"] = node["child"]["ifstmt_ifstmt"];
		}
	}
	
	function removeDeadLoop (node, str) {
		expr = node["child"][str]["expr"];
		
		for (j = 0; j < 3; j++) {
			if (expr != nil)
				expr = expr["child"];
		}
					
		if (expr != nil) { 
			val = expr["value"];
			if (val == false or val == 0 or val == nil)
				node["child"] = nil;
			else if (val == true or val != 0)
				node["child"] = node["child"]["stmt"];
		}
	}
	
	function visitStmts(v, node){		
		for(i = 0; i < node["numchildren"]; i++){
			if (node[i]["child"] != nil) {
				stmtSubtype = node[i]["child"]["subtype"];
				if(stmtSubtype == "break" or stmtSubtype == "continue" or stmtSubtype == "returnstmt" or stmtSubtype == "returnstmt_expr") {
					for(j = i + 1; j < node["numchildren"]; j++)
						node[j] = nil;
					node["numchildren"] = i + 1;
					break;
				}
				else if (stmtSubtype == "ifstmt") {
					v.removeDeadIfElse(node[i]);
				}
				else if (stmtSubtype == "whilestmt") {
					v.removeDeadLoop(node[i], "whilecond");
				}
				else if (stmtSubtype == "forstmt") {
					v.removeDeadLoop(node[i], "forprefix");
				}
			}			
		}		
	}
		
	function visitStmt(v, node){		
	}
	
	v.getStmt = getStmt;
	v.removeDeadIfElse = removeDeadIfElse;
	v.removeDeadLoop = removeDeadLoop;	
	v.visitProgram = (function (v, node){});
	v.visitStmts = visitStmts;
	v.visitStmt = visitStmt;
	v.visitBreak = (function (v, node){});
	v.visitContinue = (function (v, node){});
	v.visitExpr = (function (v, node){});
	v.visitArithExpr = (function (v, node){});
	v.visitRelExpr = (function (v, node){});
	v.visitBoolExpr = (function (v, node){});
	v.visitTerm = (function (v, node){});
	v.visitTermParensExpr = (function (v, node){});
	v.visitTermMinusExpr = (function (v, node){});
	v.visitTermNotExpr = (function (v, node){});
	v.visitTermPlusPlusLvalue = (function (v, node){});
	v.visitTermMinusMinusLvalue = (function (v, node){});
	v.visitTermLvaluePlusPlus = (function (v, node){});
	v.visitTermLvalueMinusMinus = (function (v, node){});
	v.visitAssignExpr = (function (v, node){});
	v.visitPrimary = (function (v, node){});
	v.visitLvalueId = (function (v, node){});
	v.visitLvalueGlobalId = (function (v, node){});
	v.visitLvalueLocalId = (function (v, node){});
	v.visitLvalueMember = (function (v, node){});
	v.visitMemberId = (function (v, node){});
	v.visitMemberExpr = (function (v, node){});
	v.visitCall = (function (v, node){});
	v.visitMultiCall = (function (v, node){});
	v.visitFdefCall = (function (v, node){});
	v.visitNormCallSuffix = (function (v, node){});
	v.visitMethodCallSuffix = (function (v, node){});
	v.visitNormCall = (function (v, node){});
	v.visitMethodCall = (function (v, node){});
	v.visitElist = (function (v, node){});
	v.visitElistNotEmpty = (function (v, node){});
	v.visitArgument = (function (v, node){});
	v.visitObjectDef = (function (v, node){});
	v.visitObjElistNotEmpty = (function (v, node){});
	v.visitObjectDinnerObjElistnotempty = (function (v, node){});
	v.visitObjectDinnerIndexed = (function (v, node){});
	v.visitCommaIndexed = (function (v, node){});
	v.visitIndexedElem = (function (v, node){});
	v.visitBlock = (function (v, node){});
	v.visitFuncDef = (function (v, node){});
	v.visitFuncPrefix = (function (v, node){});
	v.visitFuncName = (function (v, node){});
	v.visitConst = (function (v, node){});
	v.visitConstNumconst = (function (v, node){});
	v.visitConstStringconst = (function (v, node){});
	v.visitConstBoolconst = (function (v, node){});
	v.visitConstNil = (function (v, node){});
	v.visitID = (function (v, node){});
	v.visitCommaIdList = (function (v, node){});
	v.visitFormal = (function (v, node){});
	v.visitIfPrefix = (function (v, node){
		child = node["expr"]["child"];
		if (child != nil) {
			if (child["subtype"] == "assignexpr")
				print(child["line"], " WARNING: assignment in expression\n"); 
		}
	});
	v.visitElsePrefix = (function (v, node){});
	v.visitIfStmt = (function (v, node){});
	v.visitIfStmtElseStmt = (function (v, node){});
	v.visitWhileStart = (function (v, node){});
	v.visitWhileCond = (function (v, node){
		if (node["expr"]["child"]["subtype"] == "assignexpr")
			print(node["expr"]["child"]["line"], " WARNING: assignment in expression\n"); 
	});
	v.visitWhileStmt = (function (v, node){});
	v.visitForPrefix = (function (v, node){});
	v.visitForStmt = (function (v, node){});
	v.visitReturnStmt = (function (v, node){});
	v.visitReturnStmtExpr = (function (v, node){});
	v.visitInline = (function (v, node){});
	v.visitUnparsed = (function (v, node){});
	v.visitCompiledString = (function (v, node){});

	v.visitQuasiQuotes = (function (v, node){});
	v.visitQuotedRules = (function (v, node){});
	v.visitEscapeId = (function (v, node){});
	v.visitEscapeExpr = (function (v, node){});
	v.visitValueStorage = (function (v, node){});

	return v;
}
			
source = fileOpen("customTests/debugTest.asc");

code = fileRead(source);

ast = @(code);
		
h = TreeHost();
v = DeadCodeEliminatorVisitor();
h..setVisitor(v);

print("Code was: \n", code, "\n");		
h..accept(ast);
print("\n\nAfter elimination of dead code: \n", #(ast));